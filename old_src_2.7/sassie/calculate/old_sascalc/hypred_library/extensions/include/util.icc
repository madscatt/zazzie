// Hailiang Zhang

// code guard
#if !defined(prdf_utils_icc)
#error This file contains implementation details of the class {prdf::utils}
#endif

/*
// line parser
class
prdf::utils::LineParser
{
	private:
		std::string _delimiters;
		std::vector<std::string> _v;
		inline void _split(const std::string & s, const std::string & delimiters, const size_t n)
		{
			if (n==0)
			{
				_v.push_back(s);
				return;
			}
			std::string word;
			std::stringstream ss(s);
			while(getline(ss, word, delimiters[n-1])) _split(word, delimiters, n-1);
			//if (ss.bad() || ss.fail()) prdf::utils::Error("Failed parsing line!");
		}
	public:
		inline LineParser(){}
		inline LineParser(const std::string & line, std::string additional_delimiters=""):
			_delimiters(additional_delimiters+",; ")
		{
			_split(line, _delimiters, _delimiters.length());
		}
		inline const std::string & at(const size_t i) const {return _v[i];}
		inline std::string & at(const size_t i) {return _v[i];}
		inline const std::string & operator[] (const size_t i) const {return _v[i];}
		inline std::string & operator[] (const size_t i) {return _v[i];}
		inline size_t length() const {return _v.size();}
		inline ~LineParser()
		{
			_v.clear();
		}
};

// convert string to a template type
template <typename T> T
prdf::utils::convertStringTo(const std::string & word)
{
	T t;
	std::stringstream ss(word);
	ss>>t;
	if (ss.bad() || ss.fail())
	{
		Error("Failed converting a string \""+word+"\" to a specified type!");
		return t;
	}
	else {return t;}
}
*/

// end of file
