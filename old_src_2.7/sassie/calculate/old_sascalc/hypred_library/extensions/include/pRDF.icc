// Hailiang Zhang

#ifndef PRDF_ICC
#error the "pRDF.icc" file can only be included from the corresponding header
#endif

// get the pRDF for a given solute atom type
pRDF::pRDF_t * &
pRDF::
getpRDF(const solute_atom_type_t solute_atom_type)
{
	// check whether key exists in the map
	pRDF_map_t::iterator it = _pRDF_map.find(solute_atom_type);
	// if key does not exist
	if (it == _pRDF_map.end())
	{
		// allocate and initialize the pRDF
		pRDF_t * p =  new pRDF_t[_n_step];
		for (size_t i=0; i<_n_step; i++) {p[i].first=0.0, p[i].second=0;}
		// insert it into the map
		_pRDF_map.insert(make_pair(solute_atom_type.c_str(), p));
		// and return its value
		return _pRDF_map[solute_atom_type.c_str()];
	}
	// if key exists
	else
	{
		// retrun the value
		return it->second;
	}
}

//interface
const double
pRDF::
d_step() const
{
	return _d_step;
}

//interface
const size_t
pRDF::
n_step() const
{
	return _n_step;
}

// default constructor
pRDF::
pRDF():
	_d_step(0.0),
	_n_step(0)
{
}

// constructor
pRDF::
pRDF(const size_t n, const double spacing):
	_d_step(spacing),
	_n_step(n)
{
}


// read pRDF data from the external file (written by pRDF::print)
pRDF::
pRDF(const std::string & pRDFFileName)
{
	// local variables
	size_t i, i_distance;
	solute_atom_type_t solute_atom_type;
	pRDF_t rdf;
	std::string line, word;
	std::istringstream ss;

	// read from the external pRDF file
	std::ifstream fin(pRDFFileName.c_str());
	while (getline(fin, line))
	{
		ss.clear();
		ss.str(line);
		if (strcmp(line.substr(0,5).c_str(),"dstep")==0)
		{
			for (i=0; i<2; i++) if (!getline(ss, word, ' ')) prdf::utils::Error("error getting \"_d_step\" while parsing the prdf file!");
			_d_step = atof(word.c_str());
			std::cout<<"d "<<_d_step<<std::endl;
		}
		else if (strcmp(line.substr(0,5).c_str(),"nstep")==0)
		{
			for (i=0; i<2; i++) if (!getline(ss, word, ' ')) prdf::utils::Error("error getting \"_d_step\" while parsing the prdf file!");
			_n_step = atoi(word.c_str());
			std::cout<<"n "<<_n_step<<std::endl;
		}
		else
		{
			if (!getline(ss, word, ' ')) prdf::utils::Error("error getting \"_d_step\" while parsing the prdf file!");
			solute_atom_type = word;
			i_distance=0;
			while (getline(ss, word,' '))
			{
				getpRDF(solute_atom_type)[i_distance].first = atof(word.c_str());
				getpRDF(solute_atom_type)[i_distance].second = 1;
				i_distance++;
			}
		}
	}

	// close the file
	fin.close();
}
