// Hailiang Zhang

#ifndef BOX_ICC
#error the "box.icc" file can only be included from the corresponding header
#endif

// construct the box from solute atoms
Box::
Box(const std::vector<Coor> & solute_coordinates, const double cube_length, const double delta_expand):
	_cube_length(cube_length)
{
	// error check
	if (delta_expand<0.0) prdf::utils::Error("delta_expand must be a non-negative number!");
	if (cube_length<=0.0) prdf::utils::Error("cube_length must be a postive number!");

	// local variables
	double x, y, z;

	// calculate the box dimensions
	Coor c;
	double x_min = INF;
	double y_min = INF;
	double z_min = INF;
	double x_max = -INF;
	double y_max = -INF;
	double z_max = -INF;
	for (std::vector<Coor>::const_iterator it=solute_coordinates.begin(); it!=solute_coordinates.end(); ++it)
	{
		x=it->x();
		y=it->y();
		z=it->z();
		if (x < x_min) x_min = x;
		if (y < y_min) y_min = y;
		if (z < z_min) z_min = z;
		if (x > x_max) x_max = x;
		if (y > y_max) y_max = y;
		if (z > z_max) z_max = z;
	}
	x_min -= delta_expand;
	y_min -= delta_expand;
	z_min -= delta_expand;
	x_max += delta_expand;
	y_max += delta_expand;
	z_max += delta_expand;

    // get the box origin and number of cubes
	_c0 = Coor(x_min, y_min, z_min);
	_nx = size_t((x_max-x_min)/delta_expand);
	_ny = size_t((y_max-y_min)/delta_expand);
	_nz = size_t((z_max-z_min)/delta_expand);
}

// constructor
Box::
Box(const Coor & c0, const size_t nx, const size_t ny, const size_t nz, const double cube_length):
	_nx(nx),
	_ny(ny),
	_nz(nz),
	_c0(c0),
	_cube_length(cube_length)
{
	// error check
	if (cube_length<=0.0) prdf::utils::Error("cube_length must be a postive number!");

	// short namespace
	namespace SoluteAtom = Atom::SoluteAtom;

	// get the total number of cubes
	const size_t n=nx*ny*nz;

	// allocate cube_type_distance and cube_density_number
	_p_cube_type_distance = new cube_type_distance_t[n];
	_p_cube_density_number = new cube_density_number_t[n];

	// initialize
	for (size_t i=0; i<n; i++)
	{
		_p_cube_type_distance[i].first = "null";
		_p_cube_type_distance[i].second = INF;
		_p_cube_density_number[i].first= 0.0;
		_p_cube_density_number[i].second= 0;
	}

}

// default constructor
Box::
Box():
	_nx(0),
	_ny(0),
	_nz(0),
	_c0(),
	_cube_length(0.0)
{
}
